ree=paste0(rround(md$iccY3,3),ttu," (",rrround(md$iccYs3,3),")")
if (md$esd13 <= 0 | md$esd13 <= 0) ree=paste0(rround(md$iccY3,3),ttu," (undef.)")
img <- readTiff(figgy)
tiff(filename =FigL, width = 1400, height = 837,   pointsize = 14, bg = "white")
plot(img)
text(224,155,md$varnames$x,cex=1.8)
text(1015,165,md$varnames$y,cex=1.8)
text(217,701,md$varnames$x,cex=1.8)
text(1020,694,md$varnames$y,cex=1.8)
text(224,125,md$p2,cex=1.8)
text(1015,135,md$p2,cex=1.8)
text(217,671,md$p1,cex=1.8)
text(1020,664,md$p1,cex=1.8)
# DAK small change to make figure pretty
text(124,412,rxx,cex=1.8)
text(1273,412,ree,cex=1.8)
text(985,300,ppp2,cex=1.8)
text(528,300,ppp1,cex=1.8)
text(645,165,aaa2,cex=1.8)
text(645,700,aaa1,cex=1.8)
text(1290,278,"E2",cex=1.8)
text(1290,560,"E1",cex=1.8)
text(1290,278,"E2",cex=1.8)
text(1290,560,"E1",cex=1.8)
title(main = "Actor-Partner Interdependence Model (standardized estimates)",cex.main=3.2,line = -3)
dev.off()
}
}
##### CHECK DEZE #####
# CHECK OF DEZE GEBRUIKT #
# DAK this function is for text output; may not be needed
effectis  = function (eff,effp,effs,alp){
resu=paste0(" is equal to ",rround(eff,3)," and is",knt(effp,alp)," statistically significant (",pval(effp),") with a standardized effect of ",rrround(effs,3))
}
# CHECK OF KCON NIET BETER IN DE TEKST FUNCTIE ZIT
#' APIM.SEM
#'
#' @name APIM.SEM
#' @docType package
NULL
shinyServer(function(input, output, session) {
####### New analysis / reload button ########
output$reload <- renderUI({
if (input$newanalysis > 0) {
tags$script("window.location.reload();")
}
})
######## Reactive Data Input ########
dataInput <- reactive({
inFile <- input$file1
exdata <- input$exdata
if(is.null(inFile)){
if(exdata==""){
return(NULL)
}else if(exdata=="campbell"){
return(campbell)
}
}
if(!is.null(inFile)){
# Determine document format;
ptn <- "\\.[[:alnum:]]{1,5}$"
suf <- tolower(regmatches(inFile$name, regexpr(ptn, inFile$name)))
if(suf == ".csv"){
return(read.csv(inFile$datapath))
}else if(suf == ".txt"){
return(read.table(inFile$datapath))
}else if(suf == ".sav"){
return(read.spss(inFile$datapath, to.data.frame=TRUE,
use.value.labels=input$vallabels))
}else if(suf == ".xpt"){
return(read.xport(inFile$datapath))
}
}
})
###### Reactive Run Model #########
model <- reactive({
## arguments for apim_sem()
xname <- input$xname
yname <- input$yname
namex1 <- input$namex1
namex2 <- input$namex2
namey1 <- input$namey1
namey2 <- input$namey2
lab1 <- input$lab1
lab2 <- input$lab2
labs1 <- input$labs1
labs2 <- input$labs2
dname <- input$dname
data <- dataInput()
tryCatch(
apim_sem(xname=xname,
yname=yname,
namex1=namex1,
namex2=namex2,
namey1=namey1,
namey2=namey2,
lab1=lab1,
lab2=lab2,
labs1 = labs1,
labs2=labs2,
dname=dname,
data=data,
relx = .8,
rely = .8,
alpha = .05,
dvarr=TRUE,
fix1k = TRUE,
boottrials=50L,
fix2k = TRUE)
)
})
###### Output Data Table #########
output$mytable1 = renderDataTable({
d <- dataInput()
dprint <- format(d, digits=3)
dprint
})
#### Main Output ###########
output$summary = renderPrint({
m1 <- model()
print(m1)
})
#### Table Output ###########
output$tableoutput = renderPrint({
m1 <- model()
printTables(m1)
})
})
shinyUI(fluidPage(
titlePanel(title="APIM.SEM"),
sidebarLayout(
sidebarPanel(
tabsetPanel(
######### Data ############
tabPanel('Data',
h5("Start a New Analysis"),
actionButton("newanalysis","New Analysis"),
uiOutput("reload"),
br(),
hr(),
h5("Example Data"),
selectizeInput(inputId="exdata", label="", selected="",
choices= c("","campbell"),
options = list(placeholder = 'choose example data')),
br(),
hr(),
h5("Data File"),
tryCatch(
fileInput("file1", "",
accept=c(".csv", ".txt", ".sav", ".xpt",
".CSV", ".TXT", ".SAV", ".XPT"))
),
helpText('Select either a .csv, .txt, .sav or a .xpt file to be uploaded. The corresponding R function (read.csv, read.table, read.spss, or read.xport) will be chosen automatically with the default settings for arguments. To read in data from inside R into the shiny interface, it is easiest to save your dataset using write.csv with the default settings. If reading your SPSS file does not work, please try saving it in SAS Transport format with file ending .xpt. Causes for errors may be special characters in file names and/or path names.')
),
########## Variable Names ############
tabPanel('Variable Names',
#                conditionalPanel(
#                   condition = "!input.latenty",
#                   h5("Dependent Variable Y"),
#                   selectizeInput("variabley", "", "",
#                         options = list(placeholder = 'select dependent variable'))
#                ),
textInput("dname", "Name of Distinguishable Variable", value = "gender"),
textInput("xname", "Name of Independent Variable", value = "neurotocism"),
textInput("yname", "Name of Dependent Variable", value = "distress"),
textInput("namex1", "Name of Independent variabel first role", value = "mneuro"),
textInput("namex2", "Name of Independent variabel second role", value = "fneuro"),
textInput("namey1", "Name of dependent variabel first role", value = "mdistr"),
textInput("namey2", "Name of Name of dependent variabel second role", value = "fdistr"),
textInput("labs1", "Label first role", value = "husband"),
textInput("labs2", "Label second role", value = "wive"),
textInput("lab1", "Label first role (plural)", value = "husbands"),
textInput("lab2", "Label second role", value = "wives")
)
)),
mainPanel(
tabsetPanel(
######### Data Table ##########
tabPanel('Data', dataTableOutput("mytable1")),
######### Main Output ##########
tabPanel("Main Output", verbatimTextOutput("summary")),
######### Table Output ##########
tabPanel("Table Output", verbatimTextOutput("tableoutput"))
))
)))
shiny::runApp('inst')
setwd("H:\home\Assistentschap\2014-2015\TDA")
setwd("H:/home/Assistentschap/2014-2015/TDA")
anx<-read.spss("tda09SRM.sav",to.data.frame = TRUE)
library(foreign)
anx<-read.spss("tda09SRM.sav",to.data.frame = TRUE)
SRM <- '
# specifieren van de latente SRM-componenten
fam =˜ 1 * MOFA+1 * FAMO+1 * MOC1+1 * C1MO+1 * MOC2+1 * C2MO+
1 * FAC1+1 * C1FA+1 * FAC2+1 * C2FA+1 * C1C2+1 * C2C1
actmo=˜ 1 * MOFA+1 * MOC1+1 * MOC2; factfa=˜ 1 * FAMO+1 * FAC1+1 * FAC2
actc1=˜ 1 * C1FA+1 * C1MO+1 * C1C2; factc2=˜ 1 * C2MO+1 * C2C1+1 * C2FA
parmo=˜ 1 * FAMO+1 * C1MO+1 * C2MO; fparfa=˜ 1 * MOFA+1 * C1FA+1 * C2FA
parc1=˜ 1 * FAC1+1 * MOC1+1 * C2C1; fparc2=˜ 1 * MOC2+1 * C1C2+1 * FAC2
mofa=˜ 1 * MOFA;ffamo=˜1 * FAMO;
moc1=˜ 1 * MOC1;fc1mo=˜1 * C1MO;
moc2=˜ 1 * MOC2;fc2mo=˜1 * C2MO;
fac1=˜ 1 * FAC1;fc1fa=˜1 * C1FA;
fac2=˜ 1 * FAC2;fc2fa=˜1 * C2FA;
c1c2=˜ 1 * C1C2;fc2c1=˜1 * C2C1;
# individual reciprocities
actmo˜˜parmo; actfa˜˜parfa; actc1˜˜parc1; actc2˜˜parc2;
# dyadic reciprocities
famo˜˜mofa; c1mo˜˜moc1; c2mo˜˜moc2; c1fa˜˜fac1; c2fa˜˜fac2; c1c2˜˜c2c1
# variances observed = 0 (=> geen onderscheid tussen residuele varianties en relatie-specifieke varianties)
MOFA˜˜0 * MOFA;FAMO˜˜0 * FAMO;MOC1˜˜0 * MOC1;
C1MO˜˜0 * C1MO;MOC2˜˜0 * MOC2;C2MO˜˜0 * C2MO;
FAC1˜˜0 * FAC1;C1FA˜˜0 * C1FA;FAC2˜˜0 * FAC2;
C2FA˜˜0 * C2FA;C1C2˜˜0 * C1C2;C2C1˜˜0 * C2C1
'
fit <- lavaan(SRM, data=anx,auto.var=T)
library(lavaan)
fit <- lavaan(SRM, data=anx,auto.var=T)
SRM <- '
# specifieren van de latente SRM-componenten
fam =~ 1 * MOFA+1 * FAMO+1 * MOC1+1 * C1MO+1 * MOC2+1 * C2MO+
1 * FAC1+1 * C1FA+1 * FAC2+1 * C2FA+1 * C1C2+1 * C2C1
actmo=~ 1 * MOFA+1 * MOC1+1 * MOC2; factfa=~ 1 * FAMO+1 * FAC1+1 * FAC2
actc1=~ 1 * C1FA+1 * C1MO+1 * C1C2; factc2=~ 1 * C2MO+1 * C2C1+1 * C2FA
parmo=~ 1 * FAMO+1 * C1MO+1 * C2MO; fparfa=~ 1 * MOFA+1 * C1FA+1 * C2FA
parc1=~ 1 * FAC1+1 * MOC1+1 * C2C1; fparc2=~ 1 * MOC2+1 * C1C2+1 * FAC2
mofa=~ 1 * MOFA;ffamo=~1 * FAMO;
moc1=~ 1 * MOC1;fc1mo=~1 * C1MO;
moc2=~ 1 * MOC2;fc2mo=~1 * C2MO;
fac1=~ 1 * FAC1;fc1fa=~1 * C1FA;
fac2=~ 1 * FAC2;fc2fa=~1 * C2FA;
c1c2=~ 1 * C1C2;fc2c1=~1 * C2C1;
# individual reciprocities
actmo~~parmo; actfa~~parfa; actc1~~parc1; actc2~~parc2;
# dyadic reciprocities
famo~~mofa; c1mo~~moc1; c2mo~~moc2; c1fa~~fac1; c2fa~~fac2; c1c2~~c2c1
# variances observed = 0 (=> geen onderscheid tussen residuele varianties en relatie-specifieke varianties)
MOFA~~0 * MOFA;FAMO~~0 * FAMO;MOC1~~0 * MOC1;
C1MO~~0 * C1MO;MOC2~~0 * MOC2;C2MO~~0 * C2MO;
FAC1~~0 * FAC1;C1FA~~0 * C1FA;FAC2~~0 * FAC2;
C2FA~~0 * C2FA;C1C2~~0 * C1C2;C2C1~~0 * C2C1
'
fit <- lavaan(SRM, data=anx,auto.var=T)
SRM <- '
# specifieren van de latente SRM-componenten
fam =~ 1 * MOFA+1 * FAMO+1 * MOC1+1 * C1MO+ 1 * MOC2+1 * C2MO+ 1 * FAC1+1 * C1FA+1 * FAC2+1 * C2FA+1 * C1C2+1 * C2C1
actmo=~ 1 * MOFA+1 * MOC1+1 * MOC2; factfa=~ 1 * FAMO+1 * FAC1+1 * FAC2
actc1=~ 1 * C1FA+1 * C1MO+1 * C1C2; factc2=~ 1 * C2MO+1 * C2C1+1 * C2FA
parmo=~ 1 * FAMO+1 * C1MO+1 * C2MO; fparfa=~ 1 * MOFA+1 * C1FA+1 * C2FA
parc1=~ 1 * FAC1+1 * MOC1+1 * C2C1; fparc2=~ 1 * MOC2+1 * C1C2+1 * FAC2
mofa=~ 1 * MOFA; famo=~1 * FAMO;
moc1=~ 1 * MOC1; c1mo=~1 * C1MO;
moc2=~ 1 * MOC2; c2mo=~1 * C2MO;
fac1=~ 1 * FAC1; c1fa=~1 * C1FA;
fac2=~ 1 * FAC2; c2fa=~1 * C2FA;
c1c2=~ 1 * C1C2; c2c1=~1 * C2C1;
# individual reciprocities
actmo~~parmo; actfa~~parfa; actc1~~parc1; actc2~~parc2;
# dyadic reciprocities
famo~~mofa; c1mo~~moc1; c2mo~~moc2; c1fa~~fac1; c2fa~~fac2; c1c2~~c2c1
# variances observed = 0 (=> geen onderscheid tussen residuele varianties en relatie-specifieke varianties)
MOFA~~0 * MOFA;FAMO~~0 * FAMO;MOC1~~0 * MOC1;
C1MO~~0 * C1MO;MOC2~~0 * MOC2;C2MO~~0 * C2MO;
FAC1~~0 * FAC1;C1FA~~0 * C1FA;FAC2~~0 * FAC2;
C2FA~~0 * C2FA;C1C2~~0 * C1C2;C2C1~~0 * C2C1
'
fit <- lavaan(SRM, data=anx,auto.var=T)
SRM <- '
# specifieren van de latente SRM-componenten
fam =~ 1 * MOFA+1 * FAMO+1 * MOC1+1 * C1MO+ 1 * MOC2+1 * C2MO+ 1 * FAC1+1 * C1FA+1 * FAC2+1 * C2FA+1 * C1C2+1 * C2C1
actmo=~ 1 * MOFA+1 * MOC1+1 * MOC2; factfa=~ 1 * FAMO+1 * FAC1+1 * FAC2
actc1=~ 1 * C1FA+1 * C1MO+1 * C1C2; factc2=~ 1 * C2MO+1 * C2C1+1 * C2FA
parmo=~ 1 * FAMO+1 * C1MO+1 * C2MO; fparfa=~ 1 * MOFA+1 * C1FA+1 * C2FA
parc1=~ 1 * FAC1+1 * MOC1+1 * C2C1; fparc2=~ 1 * MOC2+1 * C1C2+1 * FAC2
mofa=~ 1 * MOFA; famo=~1 * FAMO
moc1=~ 1 * MOC1; c1mo=~1 * C1MO
moc2=~ 1 * MOC2; c2mo=~1 * C2MO
fac1=~ 1 * FAC1; c1fa=~1 * C1FA
fac2=~ 1 * FAC2; c2fa=~1 * C2FA
c1c2=~ 1 * C1C2; c2c1=~1 * C2C1
'
fit <- lavaan(SRM, data=anx,auto.var=T)
SRM <- '
# specifieren van de latente SRM-componenten
fam =~ 1 * MOFA+1 * FAMO+1 * MOC1+1 * C1MO+ 1 * MOC2+1 * C2MO+ 1 * FAC1+1 * C1FA+1 * FAC2+1 * C2FA+1 * C1C2+1 * C2C1
actmo=~ 1 * MOFA+1 * MOC1+1 * MOC2; factfa=~ 1 * FAMO+1 * FAC1+1 * FAC2
actc1=~ 1 * C1FA+1 * C1MO+1 * C1C2; factc2=~ 1 * C2MO+1 * C2C1+1 * C2FA
parmo=~ 1 * FAMO+1 * C1MO+1 * C2MO; fparfa=~ 1 * MOFA+1 * C1FA+1 * C2FA
parc1=~ 1 * FAC1+1 * MOC1+1 * C2C1; fparc2=~ 1 * MOC2+1 * C1C2+1 * FAC2
mofa=~ 1 * MOFA; famo=~1 * FAMO
moc1=~ 1 * MOC1; c1mo=~1 * C1MO
moc2=~ 1 * MOC2; c2mo=~1 * C2MO
fac1=~ 1 * FAC1; c1fa=~1 * C1FA
fac2=~ 1 * FAC2; c2fa=~1 * C2FA
c1c2=~ 1 * C1C2; c2c1=~1 * C2C1
# individual reciprocities
actmo~~parmo; actfa~~parfa; actc1~~parc1; actc2~~parc2;
'
fit <- lavaan(SRM, data=anx,auto.var=T)
SRM <- '
# specifieren van de latente SRM-componenten
fam =~ 1 * MOFA+1 * FAMO+1 * MOC1+1 * C1MO+ 1 * MOC2+1 * C2MO+ 1 * FAC1+1 * C1FA+1 * FAC2+1 * C2FA+1 * C1C2+1 * C2C1
actmo=~ 1 * MOFA+1 * MOC1+1 * MOC2; factfa=~ 1 * FAMO+1 * FAC1+1 * FAC2
actc1=~ 1 * C1FA+1 * C1MO+1 * C1C2; factc2=~ 1 * C2MO+1 * C2C1+1 * C2FA
parmo=~ 1 * FAMO+1 * C1MO+1 * C2MO; fparfa=~ 1 * MOFA+1 * C1FA+1 * C2FA
parc1=~ 1 * FAC1+1 * MOC1+1 * C2C1; fparc2=~ 1 * MOC2+1 * C1C2+1 * FAC2
mofa=~ 1 * MOFA; famo=~1 * FAMO
moc1=~ 1 * MOC1; c1mo=~1 * C1MO
moc2=~ 1 * MOC2; c2mo=~1 * C2MO
fac1=~ 1 * FAC1; c1fa=~1 * C1FA
fac2=~ 1 * FAC2; c2fa=~1 * C2FA
c1c2=~ 1 * C1C2; c2c1=~1 * C2C1
# individual reciprocities
actmo~~parmo
'
fit <- lavaan(SRM, data=anx,auto.var=T)
SRM <- '
# specifieren van de latente SRM-componenten
fam =~ 1 * MOFA+1 * FAMO+1 * MOC1+1 * C1MO+ 1 * MOC2+1 * C2MO+ 1 * FAC1+1 * C1FA+1 * FAC2+1 * C2FA+1 * C1C2+1 * C2C1
actmo=~ 1 * MOFA+1 * MOC1+1 * MOC2; factfa=~ 1 * FAMO+1 * FAC1+1 * FAC2
actc1=~ 1 * C1FA+1 * C1MO+1 * C1C2; factc2=~ 1 * C2MO+1 * C2C1+1 * C2FA
parmo=~ 1 * FAMO+1 * C1MO+1 * C2MO; fparfa=~ 1 * MOFA+1 * C1FA+1 * C2FA
parc1=~ 1 * FAC1+1 * MOC1+1 * C2C1; fparc2=~ 1 * MOC2+1 * C1C2+1 * FAC2
mofa=~ 1 * MOFA; famo=~1 * FAMO
moc1=~ 1 * MOC1; c1mo=~1 * C1MO
moc2=~ 1 * MOC2; c2mo=~1 * C2MO
fac1=~ 1 * FAC1; c1fa=~1 * C1FA
fac2=~ 1 * FAC2; c2fa=~1 * C2FA
c1c2=~ 1 * C1C2; c2c1=~1 * C2C1
# individual reciprocities
actmo~~parmo; actfa~~parfa
'
fit <- lavaan(SRM, data=anx,auto.var=T)
SRM <- '
# specifieren van de latente SRM-componenten
fam =~ 1 * MOFA+1 * FAMO+1 * MOC1+1 * C1MO+ 1 * MOC2+1 * C2MO+ 1 * FAC1+1 * C1FA+1 * FAC2+1 * C2FA+1 * C1C2+1 * C2C1
actmo=~ 1 * MOFA+1 * MOC1+1 * MOC2
actfa=~ 1 * FAMO+1 * FAC1+1 * FAC2
actc1=~ 1 * C1FA+1 * C1MO+1 * C1C2
factc2=~ 1 * C2MO+1 * C2C1+1 * C2FA
parmo=~ 1 * FAMO+1 * C1MO+1 * C2MO
parfa=~ 1 * MOFA+1 * C1FA+1 * C2FA
parc1=~ 1 * FAC1+1 * MOC1+1 * C2C1
parc2=~ 1 * MOC2+1 * C1C2+1 * FAC2
mofa=~ 1 * MOFA; famo=~1 * FAMO
moc1=~ 1 * MOC1; c1mo=~1 * C1MO
moc2=~ 1 * MOC2; c2mo=~1 * C2MO
fac1=~ 1 * FAC1; c1fa=~1 * C1FA
fac2=~ 1 * FAC2; c2fa=~1 * C2FA
c1c2=~ 1 * C1C2; c2c1=~1 * C2C1
# individual reciprocities
actmo~~parmo; actfa~~parfa; actc1~~parc1; actc2~~parc2;
# dyadic reciprocities
famo~~mofa; c1mo~~moc1; c2mo~~moc2; c1fa~~fac1; c2fa~~fac2; c1c2~~c2c1
# variances observed = 0 (=> geen onderscheid tussen residuele varianties en relatie-specifieke varianties)
MOFA~~0 * MOFA;FAMO~~0 * FAMO;MOC1~~0 * MOC1;
C1MO~~0 * C1MO;MOC2~~0 * MOC2;C2MO~~0 * C2MO;
FAC1~~0 * FAC1;C1FA~~0 * C1FA;FAC2~~0 * FAC2;
C2FA~~0 * C2FA;C1C2~~0 * C1C2;C2C1~~0 * C2C1
'
fit <- lavaan(SRM, data=anx,auto.var=T)
SRM <- '
# specifieren van de latente SRM-componenten
fam =~ 1 * MOFA+1 * FAMO+1 * MOC1+1 * C1MO+ 1 * MOC2+1 * C2MO+ 1 * FAC1+1 * C1FA+1 * FAC2+1 * C2FA+1 * C1C2+1 * C2C1
actmo=~ 1 * MOFA+1 * MOC1+1 * MOC2
actfa=~ 1 * FAMO+1 * FAC1+1 * FAC2
actc1=~ 1 * C1FA+1 * C1MO+1 * C1C2
actc2=~ 1 * C2MO+1 * C2C1+1 * C2FA
parmo=~ 1 * FAMO+1 * C1MO+1 * C2MO
parfa=~ 1 * MOFA+1 * C1FA+1 * C2FA
parc1=~ 1 * FAC1+1 * MOC1+1 * C2C1
parc2=~ 1 * MOC2+1 * C1C2+1 * FAC2
mofa=~ 1 * MOFA; famo=~1 * FAMO
moc1=~ 1 * MOC1; c1mo=~1 * C1MO
moc2=~ 1 * MOC2; c2mo=~1 * C2MO
fac1=~ 1 * FAC1; c1fa=~1 * C1FA
fac2=~ 1 * FAC2; c2fa=~1 * C2FA
c1c2=~ 1 * C1C2; c2c1=~1 * C2C1
# individual reciprocities
actmo~~parmo; actfa~~parfa; actc1~~parc1; actc2~~parc2;
# dyadic reciprocities
famo~~mofa; c1mo~~moc1; c2mo~~moc2; c1fa~~fac1; c2fa~~fac2; c1c2~~c2c1
# variances observed = 0 (=> geen onderscheid tussen residuele varianties en relatie-specifieke varianties)
MOFA~~0 * MOFA;FAMO~~0 * FAMO;MOC1~~0 * MOC1;
C1MO~~0 * C1MO;MOC2~~0 * MOC2;C2MO~~0 * C2MO;
FAC1~~0 * FAC1;C1FA~~0 * C1FA;FAC2~~0 * FAC2;
C2FA~~0 * C2FA;C1C2~~0 * C1C2;C2C1~~0 * C2C1
'
fit <- lavaan(SRM, data=anx,auto.var=T)
SRM <- '
# specifieren van de latente SRM-componenten
fam =~ 1 * MOFA+1 * FAMO+1 * MOC1+1 * C1MO+ 1 * MOC2+1 * C2MO+ 1 * FAC1+1 * C1FA+1 * FAC2+1 * C2FA+1 * C1C2+1 * C2C1
actmo=~ 1 * MOFA+1 * MOC1+1 * MOC2
actfa=~ 1 * FAMO+1 * FAC1+1 * FAC2
actc1=~ 1 * C1FA+1 * C1MO+1 * C1C2
actc2=~ 1 * C2MO+1 * C2C1+1 * C2FA
parmo=~ 1 * FAMO+1 * C1MO+1 * C2MO
parfa=~ 1 * MOFA+1 * C1FA+1 * C2FA
parc1=~ 1 * FAC1+1 * MOC1+1 * C2C1
parc2=~ 1 * MOC2+1 * C1C2+1 * FAC2
mofa=~ 1 * MOFA; famo=~1 * FAMO
moc1=~ 1 * MOC1; c1mo=~1 * C1MO
moc2=~ 1 * MOC2; c2mo=~1 * C2MO
fac1=~ 1 * FAC1; c1fa=~1 * C1FA
fac2=~ 1 * FAC2; c2fa=~1 * C2FA
c1c2=~ 1 * C1C2; c2c1=~1 * C2C1
# individual reciprocities
actmo~~parmo
actfa~~parfa
actc1~~parc1
actc2~~parc2
# dyadic reciprocities
famo~~mofa
c1mo~~moc1
c2mo~~moc2
c1fa~~fac1
c2fa~~fac2
c1c2~~c2c1
# variances observed = 0 (=> geen onderscheid tussen residuele varianties en relatie-specifieke varianties)
MOFA~~0 * MOFA
FAMO~~0 * FAMO
MOC1~~0 * MOC1
C1MO~~0 * C1MO
MOC2~~0 * MOC2
C2MO~~0 * C2MO
FAC1~~0 * FAC1
C1FA~~0 * C1FA
FAC2~~0 * FAC2
C2FA~~0 * C2FA
C1C2~~0 * C1C2
C2C1~~0 * C2C1
'
fit <- lavaan(SRM, data=anx,auto.var=T)
summar(fit,standardized=T)
summary(fit,standardized=T)
SRM <- '
# specifieren van de latente SRM-componenten
fam =~ 1 * MOFA +1 * FAMO +1 * MOC1 +1 * C1MO + 1 * MOC2 +1 * C2MO + 1 * FAC1 +1 * C1FA +1 * FAC2 +1 * C2FA +1 * C1C2 +1 * C2C1
actmo=~ 1 * MOFA +1 * MOC1 +1 * MOC2
actfa=~ 1 * FAMO +1 * FAC1 +1 * FAC2
actc1=~ 1 * C1FA +1 * C1MO +1 * C1C2
actc2=~ 1 * C2MO +1 * C2C1 +1 * C2FA
parmo=~ 1 * FAMO +1 * C1MO +1 * C2MO
parfa=~ 1 * MOFA +1 * C1FA +1 * C2FA
parc1=~ 1 * FAC1 +1 * MOC1 +1 * C2C1
parc2=~ 1 * MOC2 +1 * C1C2 +1 * FAC2
mofa=~ 1 * MOFA
famo=~1 * FAMO
moc1=~ 1 * MOC1
c1mo=~1 * C1MO
moc2=~ 1 * MOC2
c2mo=~1 * C2MO
fac1=~ 1 * FAC1
c1fa=~1 * C1FA
fac2=~ 1 * FAC2
c2fa=~1 * C2FA
c1c2=~ 1 * C1C2
c2c1=~1 * C2C1
# individual reciprocities
actmo~~parmo
actfa~~parfa
actc1~~parc1
actc2~~parc2
# dyadic reciprocities
famo~~mofa
c1mo~~moc1
c2mo~~moc2
c1fa~~fac1
c2fa~~fac2
c1c2~~c2c1
# variances observed = 0 (=> geen onderscheid tussen residuele varianties en relatie-specifieke varianties)
MOFA~~0 * MOFA
FAMO~~0 * FAMO
MOC1~~0 * MOC1
C1MO~~0 * C1MO
MOC2~~0 * MOC2
C2MO~~0 * C2MO
FAC1~~0 * FAC1
C1FA~~0 * C1FA
FAC2~~0 * FAC2
C2FA~~0 * C2FA
C1C2~~0 * C1C2
C2C1~~0 * C2C1
'
fit <- lavaan(SRM, data=anx,auto.var=T)
library(foreign, lavaan)
library(fSRM)
import()
data <- getImport()
View(data)
import()
data <- getImport()
View(data)
data(four.person)
anx <- fSRM(anx ˜ actor.id * partner.id | family.id, data = four.person)
anx <- fSRM(anx ~ actor.id * partner.id | family.id, data = four.person)
SRM <- fSRM(anx ~ actor.id * partner.id | family.id, data = four.person)
SRM
head(four.person)
library(fSRM)
data(four.person)
SRM <- fSRM(anx ~ actor.id * partner.id | family.id, data = four.person)
SRM
SRM <- fSRM(anx ~ actor.id * partner.id | family.id, data = four.person)
SRM
8.75*44
5.4*44
3.85*2.38
3*3.92
library(shiny)
runExample("01_hello")
shiny::runApp('inst')
